@Component
struct CharacterMovementState {
	desired_direction: Vec2
	moving: bool
}

struct DirectionAnims {
	idle: AnimationName
	move: AnimationName
}

@PowerUp
@Requires(CharacterController)
@Requires(CharacterMovementState)
struct TopDownCharacterMovement {
	speed: f32 = 5.0

	anim_move_left: AnimationName
	anim_move_right: AnimationName
	anim_move_up: AnimationName
	anim_move_up_right: AnimationName
	anim_move_up_left: AnimationName
	anim_move_down: AnimationName
	anim_move_down_right: AnimationName
	anim_move_down_left: AnimationName
	anim_idle_left: AnimationName
	anim_idle_right: AnimationName
	anim_idle_up: AnimationName
	anim_idle_up_right: AnimationName
	anim_idle_up_left: AnimationName
	anim_idle_down: AnimationName
	anim_idle_down_right: AnimationName
	anim_idle_down_left: AnimationName

	fn anims_for_direction(self, direction: CompassDirection) -> DirectionAnims {
		if direction == CompassDirection.North {
			return DirectionAnims(self.anim_idle_up, self.anim_move_up)
		}
		if direction == CompassDirection.NorthEast {
			return DirectionAnims(self.anim_idle_up_right, self.anim_move_up_right)
		}
		if direction == CompassDirection.NorthWest {
			return DirectionAnims(self.anim_idle_up_left, self.anim_move_up_left)
		}
		if direction == CompassDirection.East {
			return DirectionAnims(self.anim_idle_right, self.anim_move_right)
		}
		if direction == CompassDirection.South {
			return DirectionAnims(self.anim_idle_down, self.anim_move_down)
		}
		if direction == CompassDirection.SouthEast {
			return DirectionAnims(self.anim_idle_down_right, self.anim_move_down_right)
		}
		if direction == CompassDirection.SouthWest {
			return DirectionAnims(self.anim_idle_down_left, self.anim_move_down_left)
		}
		if direction == CompassDirection.West {
			return DirectionAnims(self.anim_idle_left, self.anim_move_left)
		}

		DirectionAnims(self.anim_idle_down, self.anim_idle_up)
	}
}

@Task
fn update_character_movement(
	movement_state: &CharacterMovementState,
	character: &TopDownCharacterMovement,
	controller: &CharacterController,
	flipbook: &Flipbook,
) {
	let direction = movement_state.desired_direction.as_angle().to_compass_direction()
	let anims = character.anims_for_direction(direction)

	if movement_state.moving {
		flipbook.start(anims.move, AnimationParams())
		controller.desired_velocity = movement_state.desired_direction * character.speed
	}

	// FIXME: figure out why else conditions aren't triggering properly
	if !movement_state.moving {
		flipbook.start(anims.idle, AnimationParams())
		controller.desired_velocity = Vec2(0, 0)
	}
}
